CCS PCM C Compiler, Version 3.249, 33340               18-Feb-14 20:55

               Filename: E:\Ganesh Potti\Ganesh Projects\Engineers Projects\speed monitor\hall effect.lst

               ROM used: 801 words (10%)
                         Largest free fragment is 2048
               RAM used: 32 (18%) at main() level
                         38 (22%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   22A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   0D1
.................... #include<16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=11059200) 
*
00E7:  MOVLW  3F
00E8:  MOVWF  04
00E9:  MOVF   00,W
00EA:  BTFSC  03.2
00EB:  GOTO   0F9
00EC:  MOVLW  03
00ED:  MOVWF  78
00EE:  CLRF   77
00EF:  DECFSZ 77,F
00F0:  GOTO   0EF
00F1:  DECFSZ 78,F
00F2:  GOTO   0EE
00F3:  MOVLW  95
00F4:  MOVWF  77
00F5:  DECFSZ 77,F
00F6:  GOTO   0F5
00F7:  DECFSZ 00,F
00F8:  GOTO   0EC
00F9:  RETLW  00
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
....................  
.................... #byte porta=0x06 
.................... #byte trisa=0x86 
....................  
.................... #byte portb=0x06 
.................... #byte trisb=0x86 
....................  
.................... #byte portc=0x07 
.................... #byte trisc=0x87 
....................  
.................... #bit motor=0x07.1 
....................  
.................... #byte portd=0x08 
.................... #byte trisd=0x88 
....................  
.................... #byte porte=0x09 
.................... #byte trise=0x89 
....................  
.................... #byte tmr0=0x01 
.................... #byte option_reg=0x81 
.................... #byte intcon=0x0b 
....................  
.................... #byte tmr1h=0x0f 
.................... #byte tmr1l=0x0e 
.................... #byte t1con=0x10 
.................... #byte pir1=0x0c 
.................... #byte pie1=0x8c 
....................  
.................... #bit tmr1on=t1con.0 
....................  
.................... #bit tmr0ie=intcon.5 
.................... #bit tmr0if=intcon.2 
....................  
.................... #bit reg=0x09.0 
.................... #bit rw=0x09.1 
.................... #bit en=0x09.2 
....................  
.................... void display_sec(int n); 
.................... void display_mint(int q); 
.................... void gsm(unsigned char no); 
.................... void display(int m); 
.................... unsigned int x[2]={0,0},y[3]={0,0},v[2]={0,0}; 
*
023C:  BCF    03.5
023D:  CLRF   28
023E:  CLRF   29
023F:  CLRF   2A
0240:  CLRF   2B
0241:  CLRF   2C
0242:  CLRF   2D
0243:  CLRF   2E
.................... int16 count=0,dummy=0; 
0244:  CLRF   2F
0245:  CLRF   30
0246:  CLRF   31
0247:  CLRF   32
.................... int a[3]={0},b=0,sec=0,mint=0; 
0248:  CLRF   33
0249:  CLRF   34
024A:  CLRF   35
024B:  CLRF   36
024C:  CLRF   37
024D:  CLRF   38
.................... int1 flag=0; 
024E:  BCF    39.0
....................  
.................... #int_timer0 
.................... timer0_isr() 
.................... { 
.................... b++; 
*
00D1:  INCF   36,F
.................... if(b==43) 
00D2:  MOVF   36,W
00D3:  SUBLW  2B
00D4:  BTFSS  03.2
00D5:  GOTO   0D8
.................... { 
.................... b=0; 
00D6:  CLRF   36
.................... sec++; 
00D7:  INCF   37,F
.................... } 
.................... if(sec==60) 
00D8:  MOVF   37,W
00D9:  SUBLW  3C
00DA:  BTFSS  03.2
00DB:  GOTO   0DE
.................... { 
.................... sec=0; 
00DC:  CLRF   37
.................... mint++; 
00DD:  INCF   38,F
.................... } 
.................... if(mint==60) 
00DE:  MOVF   38,W
00DF:  SUBLW  3C
00E0:  BTFSS  03.2
00E1:  GOTO   0E3
.................... { 
.................... mint=0; 
00E2:  CLRF   38
.................... } 
.................... } 
....................  
00E3:  BCF    0B.2
00E4:  BCF    0A.3
00E5:  BCF    0A.4
00E6:  GOTO   01D
.................... void command(unsigned char com) 
.................... { 
.................... portd=com; 
*
00FA:  MOVF   3D,W
00FB:  MOVWF  08
.................... reg=0; 
00FC:  BCF    09.0
.................... rw=0; 
00FD:  BCF    09.1
.................... en=1; 
00FE:  BSF    09.2
.................... delay_ms(1); 
00FF:  MOVLW  01
0100:  MOVWF  3F
0101:  CALL   0E7
.................... en=0; 
0102:  BCF    09.2
.................... } 
0103:  RETLW  00
.................... void data(unsigned char da) 
.................... { 
.................... portd=da; 
0104:  MOVF   3E,W
0105:  MOVWF  08
.................... reg=1; 
0106:  BSF    09.0
.................... rw=0; 
0107:  BCF    09.1
.................... en=1; 
0108:  BSF    09.2
.................... delay_ms(1); 
0109:  MOVLW  01
010A:  MOVWF  3F
010B:  CALL   0E7
.................... en=0; 
010C:  BCF    09.2
.................... } 
010D:  RETLW  00
....................  
.................... void main() 
.................... { 
*
022A:  CLRF   04
022B:  MOVLW  1F
022C:  ANDWF  03,F
022D:  MOVLW  11
022E:  BSF    03.5
022F:  MOVWF  19
0230:  MOVLW  22
0231:  MOVWF  18
0232:  MOVLW  90
0233:  BCF    03.5
0234:  MOVWF  18
0235:  BSF    03.5
0236:  BSF    1F.0
0237:  BSF    1F.1
0238:  BSF    1F.2
0239:  BCF    1F.3
023A:  MOVLW  07
023B:  MOVWF  1C
.................... portb=0x00;portc=0x00;portd=0x00;porte=0x00;porta=0x00; 
*
024F:  CLRF   06
0250:  CLRF   07
0251:  CLRF   08
0252:  CLRF   09
0253:  CLRF   06
.................... trisb=0x00;trisc=0x01;trisd=0x00;trise=0x00;trisa=0x00; 
0254:  BSF    03.5
0255:  CLRF   06
0256:  MOVLW  01
0257:  MOVWF  07
0258:  CLRF   08
0259:  CLRF   09
025A:  CLRF   06
....................  
.................... t1con=0x07; 
025B:  MOVLW  07
025C:  BCF    03.5
025D:  MOVWF  10
.................... tmr1l=0x00; 
025E:  CLRF   0E
.................... tmr1h=0x00; 
025F:  CLRF   0F
....................  
.................... option_reg=0x07; 
0260:  BSF    03.5
0261:  MOVWF  01
.................... intcon=0xa0; 
0262:  MOVLW  A0
0263:  BCF    03.5
0264:  MOVWF  0B
.................... tmr0=0x00; 
0265:  CLRF   01
.................... delay_ms(2); 
0266:  MOVLW  02
0267:  MOVWF  3F
0268:  CALL   0E7
.................... command(0x38); 
0269:  MOVLW  38
026A:  MOVWF  3D
026B:  CALL   0FA
.................... command(0x06); 
026C:  MOVLW  06
026D:  MOVWF  3D
026E:  CALL   0FA
.................... command(0x0c); 
026F:  MOVLW  0C
0270:  MOVWF  3D
0271:  CALL   0FA
.................... command(0x01); 
0272:  MOVLW  01
0273:  MOVWF  3D
0274:  CALL   0FA
....................  
.................... delay_ms(100); 
0275:  MOVLW  64
0276:  MOVWF  3F
0277:  CALL   0E7
.................... command(0x80); 
0278:  MOVLW  80
0279:  MOVWF  3D
027A:  CALL   0FA
.................... data("SPEED MONITORING:"); 
027B:  CLRF   3A
027C:  MOVF   3A,W
027D:  CALL   033
027E:  IORLW  00
027F:  BTFSC  03.2
0280:  GOTO   285
0281:  INCF   3A,F
0282:  MOVWF  3E
0283:  CALL   104
0284:  GOTO   27C
.................... command(0xc0); 
0285:  MOVLW  C0
0286:  MOVWF  3D
0287:  CALL   0FA
.................... data("    SYSTEM    "); 
0288:  CLRF   3A
0289:  MOVF   3A,W
028A:  CALL   049
028B:  IORLW  00
028C:  BTFSC  03.2
028D:  GOTO   292
028E:  INCF   3A,F
028F:  MOVWF  3E
0290:  CALL   104
0291:  GOTO   289
.................... delay_ms(2000); 
0292:  MOVLW  08
0293:  MOVWF  3A
0294:  MOVLW  FA
0295:  MOVWF  3F
0296:  CALL   0E7
0297:  DECFSZ 3A,F
0298:  GOTO   294
.................... command(0x01); 
0299:  MOVLW  01
029A:  MOVWF  3D
029B:  CALL   0FA
....................  
.................... fputs("AT+CMGF=1"); 
029C:  CLRF   3A
029D:  MOVF   3A,W
029E:  CALL   05C
029F:  IORLW  00
02A0:  BTFSC  03.2
02A1:  GOTO   2A7
02A2:  INCF   3A,F
02A3:  BTFSS  0C.4
02A4:  GOTO   2A3
02A5:  MOVWF  19
02A6:  GOTO   29D
02A7:  MOVLW  0D
02A8:  BTFSS  0C.4
02A9:  GOTO   2A8
02AA:  MOVWF  19
02AB:  MOVLW  0A
02AC:  BTFSS  0C.4
02AD:  GOTO   2AC
02AE:  MOVWF  19
.................... delay_ms(1000); 
02AF:  MOVLW  04
02B0:  MOVWF  3A
02B1:  MOVLW  FA
02B2:  MOVWF  3F
02B3:  CALL   0E7
02B4:  DECFSZ 3A,F
02B5:  GOTO   2B1
....................  
....................  
.................... fputs("AT+CNMI=1,2,0,0,0"); 
02B6:  CLRF   3A
02B7:  MOVF   3A,W
02B8:  CALL   06A
02B9:  IORLW  00
02BA:  BTFSC  03.2
02BB:  GOTO   2C1
02BC:  INCF   3A,F
02BD:  BTFSS  0C.4
02BE:  GOTO   2BD
02BF:  MOVWF  19
02C0:  GOTO   2B7
02C1:  MOVLW  0D
02C2:  BTFSS  0C.4
02C3:  GOTO   2C2
02C4:  MOVWF  19
02C5:  MOVLW  0A
02C6:  BTFSS  0C.4
02C7:  GOTO   2C6
02C8:  MOVWF  19
.................... delay_ms(1000); 
02C9:  MOVLW  04
02CA:  MOVWF  3A
02CB:  MOVLW  FA
02CC:  MOVWF  3F
02CD:  CALL   0E7
02CE:  DECFSZ 3A,F
02CF:  GOTO   2CB
....................  
.................... fputs("AT+CMGR=1"); 
02D0:  CLRF   3A
02D1:  MOVF   3A,W
02D2:  CALL   080
02D3:  IORLW  00
02D4:  BTFSC  03.2
02D5:  GOTO   2DB
02D6:  INCF   3A,F
02D7:  BTFSS  0C.4
02D8:  GOTO   2D7
02D9:  MOVWF  19
02DA:  GOTO   2D1
02DB:  MOVLW  0D
02DC:  BTFSS  0C.4
02DD:  GOTO   2DC
02DE:  MOVWF  19
02DF:  MOVLW  0A
02E0:  BTFSS  0C.4
02E1:  GOTO   2E0
02E2:  MOVWF  19
.................... delay_ms(1000); 
02E3:  MOVLW  04
02E4:  MOVWF  3A
02E5:  MOVLW  FA
02E6:  MOVWF  3F
02E7:  CALL   0E7
02E8:  DECFSZ 3A,F
02E9:  GOTO   2E5
....................  
.................... while(1) 
.................... { 
.................... delay_ms(150); 
02EA:  MOVLW  96
02EB:  MOVWF  3F
02EC:  CALL   0E7
.................... command(0xc0); 
02ED:  MOVLW  C0
02EE:  MOVWF  3D
02EF:  CALL   0FA
.................... data("SPEED:"); 
02F0:  CLRF   3A
02F1:  MOVF   3A,W
02F2:  CALL   08E
02F3:  IORLW  00
02F4:  BTFSC  03.2
02F5:  GOTO   2FA
02F6:  INCF   3A,F
02F7:  MOVWF  3E
02F8:  CALL   104
02F9:  GOTO   2F1
.................... motor=1; 
02FA:  BSF    07.1
.................... count=make16(tmr1h,tmr1l); 
02FB:  MOVF   0F,W
02FC:  MOVWF  30
02FD:  MOVF   0E,W
02FE:  MOVWF  2F
.................... display(count); 
02FF:  MOVF   2F,W
0300:  MOVWF  3A
0301:  GOTO   123
.................... delay_ms(200); 
0302:  MOVLW  C8
0303:  MOVWF  3F
0304:  CALL   0E7
.................... command(0x80); 
0305:  MOVLW  80
0306:  MOVWF  3D
0307:  CALL   0FA
.................... data("MINT:SEC::"); 
0308:  CLRF   3A
0309:  MOVF   3A,W
030A:  CALL   099
030B:  IORLW  00
030C:  BTFSC  03.2
030D:  GOTO   312
030E:  INCF   3A,F
030F:  MOVWF  3E
0310:  CALL   104
0311:  GOTO   309
.................... display_sec(sec); 
0312:  MOVF   37,W
0313:  MOVWF  3A
0314:  GOTO   15C
.................... delay_ms(100); 
0315:  MOVLW  64
0316:  MOVWF  3F
0317:  CALL   0E7
.................... display_mint(mint); 
0318:  MOVF   38,W
0319:  MOVWF  3A
031A:  GOTO   185
....................  
.................... if(mint==1) 
031B:  DECFSZ 38,W
031C:  GOTO   31F
.................... { 
.................... gsm(0); 
031D:  CLRF   3A
031E:  GOTO   1B8
.................... } 
.................... } 
031F:  GOTO   2EA
.................... } 
.................... void display(int m) 
.................... { 
0320:  SLEEP
.................... int j=0,i=0; 
*
0123:  CLRF   3B
0124:  CLRF   3C
.................... for(j=0;j<=1;j++) 
0125:  CLRF   3B
0126:  MOVF   3B,W
0127:  SUBLW  01
0128:  BTFSS  03.0
0129:  GOTO   147
.................... { 
.................... y[j]=m%10; 
012A:  MOVLW  2A
012B:  ADDWF  3B,W
012C:  MOVWF  04
012D:  MOVF   3A,W
012E:  MOVWF  3E
012F:  MOVLW  0A
0130:  MOVWF  3F
0131:  CALL   10E
0132:  MOVF   77,W
0133:  MOVWF  00
.................... a[i]=m%10; 
0134:  MOVLW  33
0135:  ADDWF  3C,W
0136:  MOVWF  04
0137:  MOVF   3A,W
0138:  MOVWF  3E
0139:  MOVLW  0A
013A:  MOVWF  3F
013B:  CALL   10E
013C:  MOVF   77,W
013D:  MOVWF  00
.................... m=m/10; 
013E:  MOVF   3A,W
013F:  MOVWF  3E
0140:  MOVLW  0A
0141:  MOVWF  3F
0142:  CALL   10E
0143:  MOVF   78,W
0144:  MOVWF  3A
.................... } 
0145:  INCF   3B,F
0146:  GOTO   126
.................... command(0xc7); 
0147:  MOVLW  C7
0148:  MOVWF  3D
0149:  CALL   0FA
.................... data(y[2]|0x30); 
014A:  MOVF   2C,W
014B:  IORLW  30
014C:  MOVWF  3D
014D:  MOVWF  3E
014E:  CALL   104
.................... data(y[1]|0x30); 
014F:  MOVF   2B,W
0150:  IORLW  30
0151:  MOVWF  3D
0152:  MOVWF  3E
0153:  CALL   104
.................... data(y[0]|0x30); 
0154:  MOVF   2A,W
0155:  IORLW  30
0156:  MOVWF  3D
0157:  MOVWF  3E
0158:  CALL   104
.................... } 
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   302 (RETURN)
.................... void display_mint(unsigned int q) 
.................... { 
.................... int s=0; 
*
0185:  CLRF   3B
.................... for(s=0;s<=1;s++) 
0186:  CLRF   3B
0187:  MOVF   3B,W
0188:  SUBLW  01
0189:  BTFSS  03.0
018A:  GOTO   19E
.................... { 
.................... v[s]=q%10; 
018B:  MOVLW  2D
018C:  ADDWF  3B,W
018D:  MOVWF  04
018E:  MOVF   3A,W
018F:  MOVWF  3E
0190:  MOVLW  0A
0191:  MOVWF  3F
0192:  CALL   10E
0193:  MOVF   77,W
0194:  MOVWF  00
.................... q=q/10; 
0195:  MOVF   3A,W
0196:  MOVWF  3E
0197:  MOVLW  0A
0198:  MOVWF  3F
0199:  CALL   10E
019A:  MOVF   78,W
019B:  MOVWF  3A
.................... } 
019C:  INCF   3B,F
019D:  GOTO   187
.................... command(0xc8a); 
019E:  MOVLW  8A
019F:  MOVWF  3D
01A0:  CALL   0FA
.................... data(v[1]|0x30); 
01A1:  MOVF   2E,W
01A2:  IORLW  30
01A3:  MOVWF  3C
01A4:  MOVWF  3E
01A5:  CALL   104
.................... data(v[0]|0x30); 
01A6:  MOVF   2D,W
01A7:  IORLW  30
01A8:  MOVWF  3C
01A9:  MOVWF  3E
01AA:  CALL   104
.................... data(":"); 
01AB:  CLRF   3C
01AC:  MOVF   3C,W
01AD:  CALL   0A8
01AE:  IORLW  00
01AF:  BTFSC  03.2
01B0:  GOTO   1B5
01B1:  INCF   3C,F
01B2:  MOVWF  3E
01B3:  CALL   104
01B4:  GOTO   1AC
.................... } 
01B5:  BCF    0A.3
01B6:  BCF    0A.4
01B7:  GOTO   31B (RETURN)
.................... void display_sec(unsigned int n) 
.................... { 
.................... int i=0; 
*
015C:  CLRF   3B
.................... for(i=0;i<=1;i++) 
015D:  CLRF   3B
015E:  MOVF   3B,W
015F:  SUBLW  01
0160:  BTFSS  03.0
0161:  GOTO   175
.................... { 
.................... x[i]=n%10; 
0162:  MOVLW  28
0163:  ADDWF  3B,W
0164:  MOVWF  04
0165:  MOVF   3A,W
0166:  MOVWF  3E
0167:  MOVLW  0A
0168:  MOVWF  3F
0169:  CALL   10E
016A:  MOVF   77,W
016B:  MOVWF  00
.................... n=n/10; 
016C:  MOVF   3A,W
016D:  MOVWF  3E
016E:  MOVLW  0A
016F:  MOVWF  3F
0170:  CALL   10E
0171:  MOVF   78,W
0172:  MOVWF  3A
.................... } 
0173:  INCF   3B,F
0174:  GOTO   15E
.................... command(0x8d); 
0175:  MOVLW  8D
0176:  MOVWF  3D
0177:  CALL   0FA
.................... data(x[1]|0x30); 
0178:  MOVF   29,W
0179:  IORLW  30
017A:  MOVWF  3C
017B:  MOVWF  3E
017C:  CALL   104
.................... data(x[0]|0x30); 
017D:  MOVF   28,W
017E:  IORLW  30
017F:  MOVWF  3C
0180:  MOVWF  3E
0181:  CALL   104
.................... } 
0182:  BCF    0A.3
0183:  BCF    0A.4
0184:  GOTO   315 (RETURN)
....................  
.................... void gsm(unsigned char no) 
.................... { 
.................... int b; 
.................... if(no==0) 
*
01B8:  MOVF   3A,F
01B9:  BTFSS  03.2
01BA:  GOTO   1CE
.................... puts("AT+CMGS=\"8056308831\""); 
01BB:  CLRF   3C
01BC:  MOVF   3C,W
01BD:  CALL   0AE
01BE:  IORLW  00
01BF:  BTFSC  03.2
01C0:  GOTO   1C6
01C1:  INCF   3C,F
01C2:  BTFSS  0C.4
01C3:  GOTO   1C2
01C4:  MOVWF  19
01C5:  GOTO   1BC
01C6:  MOVLW  0D
01C7:  BTFSS  0C.4
01C8:  GOTO   1C7
01C9:  MOVWF  19
01CA:  MOVLW  0A
01CB:  BTFSS  0C.4
01CC:  GOTO   1CB
01CD:  MOVWF  19
....................  
.................... puts("SPEED"); 
01CE:  CLRF   3C
01CF:  MOVF   3C,W
01D0:  CALL   0C7
01D1:  IORLW  00
01D2:  BTFSC  03.2
01D3:  GOTO   1D9
01D4:  INCF   3C,F
01D5:  BTFSS  0C.4
01D6:  GOTO   1D5
01D7:  MOVWF  19
01D8:  GOTO   1CF
01D9:  MOVLW  0D
01DA:  BTFSS  0C.4
01DB:  GOTO   1DA
01DC:  MOVWF  19
01DD:  MOVLW  0A
01DE:  BTFSS  0C.4
01DF:  GOTO   1DE
01E0:  MOVWF  19
.................... puts(a[2]|0x30); 
01E1:  MOVF   35,W
01E2:  IORLW  30
01E3:  MOVWF  3C
01E4:  MOVWF  04
01E5:  MOVLW  00
01E6:  IORWF  00,W
01E7:  BTFSC  03.2
01E8:  GOTO   1EF
01E9:  BTFSS  0C.4
01EA:  GOTO   1E9
01EB:  MOVF   00,W
01EC:  MOVWF  19
01ED:  INCF   04,F
01EE:  GOTO   1E5
01EF:  MOVLW  0D
01F0:  BTFSS  0C.4
01F1:  GOTO   1F0
01F2:  MOVWF  19
01F3:  MOVLW  0A
01F4:  BTFSS  0C.4
01F5:  GOTO   1F4
01F6:  MOVWF  19
.................... puts(a[1]|0x30); 
01F7:  MOVF   34,W
01F8:  IORLW  30
01F9:  MOVWF  3C
01FA:  MOVWF  04
01FB:  MOVLW  00
01FC:  IORWF  00,W
01FD:  BTFSC  03.2
01FE:  GOTO   205
01FF:  BTFSS  0C.4
0200:  GOTO   1FF
0201:  MOVF   00,W
0202:  MOVWF  19
0203:  INCF   04,F
0204:  GOTO   1FB
0205:  MOVLW  0D
0206:  BTFSS  0C.4
0207:  GOTO   206
0208:  MOVWF  19
0209:  MOVLW  0A
020A:  BTFSS  0C.4
020B:  GOTO   20A
020C:  MOVWF  19
.................... puts(a[0]|0x30); 
020D:  MOVF   33,W
020E:  IORLW  30
020F:  MOVWF  3C
0210:  MOVWF  04
0211:  MOVLW  00
0212:  IORWF  00,W
0213:  BTFSC  03.2
0214:  GOTO   21B
0215:  BTFSS  0C.4
0216:  GOTO   215
0217:  MOVF   00,W
0218:  MOVWF  19
0219:  INCF   04,F
021A:  GOTO   211
021B:  MOVLW  0D
021C:  BTFSS  0C.4
021D:  GOTO   21C
021E:  MOVWF  19
021F:  MOVLW  0A
0220:  BTFSS  0C.4
0221:  GOTO   220
0222:  MOVWF  19
.................... putc(0x1a); 
0223:  MOVLW  1A
0224:  BTFSS  0C.4
0225:  GOTO   224
0226:  MOVWF  19
....................  
.................... } 
0227:  BCF    0A.3
0228:  BCF    0A.4
0229:  GOTO   31F (RETURN)
