CCS PCM C Compiler, Version 3.249, 33340               10-Mar-14 01:41

               Filename: C:\Users\GRT EMBEDDED\Desktop\flow meter\flow meter.lst

               ROM used: 522 words (6%)
                         Largest free fragment is 2048
               RAM used: 20 (11%) at main() level
                         32 (18%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   172
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   064
.................... #include<16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
.................... #use delay(clock=11059200) 
*
0076:  MOVLW  37
0077:  MOVWF  04
0078:  MOVF   00,W
0079:  BTFSC  03.2
007A:  GOTO   088
007B:  MOVLW  03
007C:  MOVWF  78
007D:  CLRF   77
007E:  DECFSZ 77,F
007F:  GOTO   07E
0080:  DECFSZ 78,F
0081:  GOTO   07D
0082:  MOVLW  95
0083:  MOVWF  77
0084:  DECFSZ 77,F
0085:  GOTO   084
0086:  DECFSZ 00,F
0087:  GOTO   07B
0088:  RETLW  00
....................  
.................... #byte portc=0x07 
.................... #byte trisc=0x87 
....................  
.................... #byte portd=0x08 
.................... #byte trisd=0x88 
....................  
.................... #byte porte=0x09 
.................... #byte trise=0x89 
....................  
.................... #byte option_reg=0x81 
.................... #byte intcon=0x0b 
....................  
.................... #byte tmr1h=0x0f 
.................... #byte tmr1l=0x0e 
.................... #byte t1con=0x10 
....................  
.................... #byte tmr0=0x01 
.................... #byte pir1=0x0c 
.................... #byte pie1=0x8c 
....................  
.................... #bit tmr0ie=intcon.5 
....................  
.................... #bit reg=0x09.0 
.................... #bit rw=0x09.1 
.................... #bit en=0x09.2 
....................  
.................... int b=0,sec=0,mint=0; 
*
017C:  BCF    03.5
017D:  CLRF   28
017E:  CLRF   29
017F:  CLRF   2A
.................... unsigned int16 count=0; 
0180:  CLRF   2B
0181:  CLRF   2C
.................... int1 flag=0; 
0182:  BCF    2D.0
.................... void display(unsigned int16 n); 
.................... void display_sec(int n); 
.................... void display_mint(int q); 
....................  
.................... #int_timer0 
.................... timer0_isr() 
.................... { 
.................... b++; 
*
0064:  INCF   28,F
.................... if(b==43) 
0065:  MOVF   28,W
0066:  SUBLW  2B
0067:  BTFSS  03.2
0068:  GOTO   06B
.................... { 
.................... b=0; 
0069:  CLRF   28
.................... sec++; 
006A:  INCF   29,F
.................... } 
.................... if(sec>=60) 
006B:  MOVF   29,W
006C:  SUBLW  3B
006D:  BTFSC  03.0
006E:  GOTO   072
.................... { 
.................... sec=0; 
006F:  CLRF   29
.................... mint++;flag=1; 
0070:  INCF   2A,F
0071:  BSF    2D.0
.................... } 
.................... } 
0072:  BCF    0B.2
0073:  BCF    0A.3
0074:  BCF    0A.4
0075:  GOTO   01D
.................... void command(unsigned char com) 
.................... { 
.................... portd=com; 
*
0089:  MOVF   35,W
008A:  MOVWF  08
.................... reg=0; 
008B:  BCF    09.0
.................... rw=0; 
008C:  BCF    09.1
.................... en=1; 
008D:  BSF    09.2
.................... delay_ms(1); 
008E:  MOVLW  01
008F:  MOVWF  37
0090:  CALL   076
.................... en=0; 
0091:  BCF    09.2
.................... } 
0092:  RETLW  00
....................  
.................... void data(unsigned int da) 
.................... { 
.................... portd=da; 
0093:  MOVF   36,W
0094:  MOVWF  08
.................... reg=1;rw=0; 
0095:  BSF    09.0
0096:  BCF    09.1
.................... en=1; 
0097:  BSF    09.2
.................... delay_ms(1); 
0098:  MOVLW  01
0099:  MOVWF  37
009A:  CALL   076
.................... en=0; 
009B:  BCF    09.2
.................... } 
009C:  RETLW  00
....................  
.................... void main() 
.................... { 
*
0172:  CLRF   04
0173:  MOVLW  1F
0174:  ANDWF  03,F
0175:  BSF    03.5
0176:  BSF    1F.0
0177:  BSF    1F.1
0178:  BSF    1F.2
0179:  BCF    1F.3
017A:  MOVLW  07
017B:  MOVWF  1C
.................... portc=0x00;portd=0x00;porte=0x00; 
*
0183:  CLRF   07
0184:  CLRF   08
0185:  CLRF   09
.................... trisc=0x01;trisd=0x00;trise=0x00; 
0186:  MOVLW  01
0187:  BSF    03.5
0188:  MOVWF  07
0189:  CLRF   08
018A:  CLRF   09
....................  
.................... t1con=0x07; 
018B:  MOVLW  07
018C:  BCF    03.5
018D:  MOVWF  10
.................... tmr1l=0x00; 
018E:  CLRF   0E
.................... tmr1h=0x00; 
018F:  CLRF   0F
....................  
.................... option_reg=0x07; 
0190:  BSF    03.5
0191:  MOVWF  01
.................... intcon=0xc0; 
0192:  MOVLW  C0
0193:  BCF    03.5
0194:  MOVWF  0B
.................... tmr0=0x00; 
0195:  CLRF   01
.................... tmr0ie=0; 
0196:  BCF    0B.5
.................... delay_ms(2); 
0197:  MOVLW  02
0198:  MOVWF  37
0199:  CALL   076
....................  
.................... command(0x38); 
019A:  MOVLW  38
019B:  MOVWF  35
019C:  CALL   089
.................... command(0x06); 
019D:  MOVLW  06
019E:  MOVWF  35
019F:  CALL   089
.................... command(0x0c); 
01A0:  MOVLW  0C
01A1:  MOVWF  35
01A2:  CALL   089
.................... command(0x01); 
01A3:  MOVLW  01
01A4:  MOVWF  35
01A5:  CALL   089
....................  
.................... delay_ms(250); 
01A6:  MOVLW  FA
01A7:  MOVWF  37
01A8:  CALL   076
....................  
.................... command(0x80); 
01A9:  MOVLW  80
01AA:  MOVWF  35
01AB:  CALL   089
.................... data("FLOW METER"); 
01AC:  CLRF   2E
01AD:  MOVF   2E,W
01AE:  CALL   033
01AF:  IORLW  00
01B0:  BTFSC  03.2
01B1:  GOTO   1B6
01B2:  INCF   2E,F
01B3:  MOVWF  36
01B4:  CALL   093
01B5:  GOTO   1AD
....................  
.................... delay_ms(1000); 
01B6:  MOVLW  04
01B7:  MOVWF  2E
01B8:  MOVLW  FA
01B9:  MOVWF  37
01BA:  CALL   076
01BB:  DECFSZ 2E,F
01BC:  GOTO   1B8
.................... command(0x01); 
01BD:  MOVLW  01
01BE:  MOVWF  35
01BF:  CALL   089
....................  
.................... while(1) 
.................... { 
.................... delay_ms(100); 
01C0:  MOVLW  64
01C1:  MOVWF  37
01C2:  CALL   076
.................... command(0xc0); 
01C3:  MOVLW  C0
01C4:  MOVWF  35
01C5:  CALL   089
.................... data("MINT_SEC:"); 
01C6:  CLRF   2E
01C7:  MOVF   2E,W
01C8:  CALL   042
01C9:  IORLW  00
01CA:  BTFSC  03.2
01CB:  GOTO   1D0
01CC:  INCF   2E,F
01CD:  MOVWF  36
01CE:  CALL   093
01CF:  GOTO   1C7
.................... display_sec(sec); 
01D0:  MOVF   29,W
01D1:  MOVWF  2E
01D2:  GOTO   0B2
.................... delay_ms(300); 
01D3:  MOVLW  02
01D4:  MOVWF  2E
01D5:  MOVLW  96
01D6:  MOVWF  37
01D7:  CALL   076
01D8:  DECFSZ 2E,F
01D9:  GOTO   1D5
.................... display_mint(mint); 
01DA:  MOVF   2A,W
01DB:  MOVWF  2E
01DC:  GOTO   0DB
.................... command(0x80); 
01DD:  MOVLW  80
01DE:  MOVWF  35
01DF:  CALL   089
.................... data("FLOW MTR:"); 
01E0:  CLRF   2E
01E1:  MOVF   2E,W
01E2:  CALL   050
01E3:  IORLW  00
01E4:  BTFSC  03.2
01E5:  GOTO   1EA
01E6:  INCF   2E,F
01E7:  MOVWF  36
01E8:  CALL   093
01E9:  GOTO   1E1
.................... delay_ms(100); 
01EA:  MOVLW  64
01EB:  MOVWF  37
01EC:  CALL   076
.................... display(count); 
01ED:  MOVF   2C,W
01EE:  MOVWF  2F
01EF:  MOVF   2B,W
01F0:  MOVWF  2E
01F1:  GOTO   134
.................... count=make16(tmr1h,tmr1l); 
01F2:  MOVF   0F,W
01F3:  MOVWF  2C
01F4:  MOVF   0E,W
01F5:  MOVWF  2B
.................... if(count>=1) 
01F6:  MOVF   2C,F
01F7:  BTFSS  03.2
01F8:  GOTO   1FD
01F9:  MOVF   2B,W
01FA:  SUBLW  00
01FB:  BTFSC  03.0
01FC:  GOTO   1FE
.................... { 
.................... tmr0ie=1; 
01FD:  BSF    0B.5
.................... } 
.................... if(mint>=1) 
01FE:  MOVF   2A,W
01FF:  SUBLW  00
0200:  BTFSC  03.0
0201:  GOTO   208
.................... { 
.................... mint=0; 
0202:  CLRF   2A
.................... count=0; 
0203:  CLRF   2C
0204:  CLRF   2B
.................... tmr0ie=0; 
0205:  BCF    0B.5
.................... tmr1l=0x00; 
0206:  CLRF   0E
.................... tmr1h=0x00; 
0207:  CLRF   0F
.................... } 
.................... } 
0208:  GOTO   1C0
.................... } 
....................  
.................... void display_mint(int q) 
.................... { 
0209:  SLEEP
.................... int v[2],s=0; 
*
00DB:  CLRF   31
.................... for(s=0;s<=1;s++) 
00DC:  CLRF   31
00DD:  MOVF   31,W
00DE:  SUBLW  01
00DF:  BTFSS  03.0
00E0:  GOTO   0F4
.................... { 
.................... v[s]=q%10; 
00E1:  MOVLW  2F
00E2:  ADDWF  31,W
00E3:  MOVWF  04
00E4:  MOVF   2E,W
00E5:  MOVWF  33
00E6:  MOVLW  0A
00E7:  MOVWF  34
00E8:  CALL   09D
00E9:  MOVF   77,W
00EA:  MOVWF  00
.................... q=q/10; 
00EB:  MOVF   2E,W
00EC:  MOVWF  33
00ED:  MOVLW  0A
00EE:  MOVWF  34
00EF:  CALL   09D
00F0:  MOVF   78,W
00F1:  MOVWF  2E
.................... } 
00F2:  INCF   31,F
00F3:  GOTO   0DD
.................... command(0xc9); 
00F4:  MOVLW  C9
00F5:  MOVWF  35
00F6:  CALL   089
.................... data(v[1]|0x30); 
00F7:  MOVF   30,W
00F8:  IORLW  30
00F9:  MOVWF  32
00FA:  MOVWF  36
00FB:  CALL   093
.................... data(v[0]|0x30); 
00FC:  MOVF   2F,W
00FD:  IORLW  30
00FE:  MOVWF  32
00FF:  MOVWF  36
0100:  CALL   093
.................... data(":"); 
0101:  CLRF   32
0102:  MOVF   32,W
0103:  CALL   05E
0104:  IORLW  00
0105:  BTFSC  03.2
0106:  GOTO   10B
0107:  INCF   32,F
0108:  MOVWF  36
0109:  CALL   093
010A:  GOTO   102
.................... } 
010B:  BCF    0A.3
010C:  BCF    0A.4
010D:  GOTO   1DD (RETURN)
.................... void display_sec(int n) 
.................... { 
.................... int x[2],i=0; 
*
00B2:  CLRF   31
.................... for(i=0;i<=1;i++) 
00B3:  CLRF   31
00B4:  MOVF   31,W
00B5:  SUBLW  01
00B6:  BTFSS  03.0
00B7:  GOTO   0CB
.................... { 
.................... x[i]=n%10; 
00B8:  MOVLW  2F
00B9:  ADDWF  31,W
00BA:  MOVWF  04
00BB:  MOVF   2E,W
00BC:  MOVWF  33
00BD:  MOVLW  0A
00BE:  MOVWF  34
00BF:  CALL   09D
00C0:  MOVF   77,W
00C1:  MOVWF  00
.................... n=n/10; 
00C2:  MOVF   2E,W
00C3:  MOVWF  33
00C4:  MOVLW  0A
00C5:  MOVWF  34
00C6:  CALL   09D
00C7:  MOVF   78,W
00C8:  MOVWF  2E
.................... } 
00C9:  INCF   31,F
00CA:  GOTO   0B4
.................... command(0xcc); 
00CB:  MOVLW  CC
00CC:  MOVWF  35
00CD:  CALL   089
.................... data(x[1]|0x30); 
00CE:  MOVF   30,W
00CF:  IORLW  30
00D0:  MOVWF  32
00D1:  MOVWF  36
00D2:  CALL   093
.................... data(x[0]|0x30); 
00D3:  MOVF   2F,W
00D4:  IORLW  30
00D5:  MOVWF  32
00D6:  MOVWF  36
00D7:  CALL   093
.................... } 
00D8:  BCF    0A.3
00D9:  BCF    0A.4
00DA:  GOTO   1D3 (RETURN)
....................  
.................... void display(unsigned int16 n) 
.................... { 
.................... int c[4],k=0; 
*
0134:  CLRF   34
.................... for(k=0;k<=3;k++) 
0135:  CLRF   34
0136:  MOVF   34,W
0137:  SUBLW  03
0138:  BTFSS  03.0
0139:  GOTO   155
.................... { 
.................... c[k]=n%10; 
013A:  MOVLW  30
013B:  ADDWF  34,W
013C:  MOVWF  04
013D:  MOVF   2F,W
013E:  MOVWF  37
013F:  MOVF   2E,W
0140:  MOVWF  36
0141:  CLRF   39
0142:  MOVLW  0A
0143:  MOVWF  38
0144:  CALL   10E
0145:  MOVF   77,W
0146:  MOVWF  00
.................... n=n/10; 
0147:  MOVF   2F,W
0148:  MOVWF  37
0149:  MOVF   2E,W
014A:  MOVWF  36
014B:  CLRF   39
014C:  MOVLW  0A
014D:  MOVWF  38
014E:  CALL   10E
014F:  MOVF   79,W
0150:  MOVWF  2F
0151:  MOVF   78,W
0152:  MOVWF  2E
.................... } 
0153:  INCF   34,F
0154:  GOTO   136
.................... command(0x89); 
0155:  MOVLW  89
0156:  MOVWF  35
0157:  CALL   089
.................... data(c[3]|0x30); 
0158:  MOVF   33,W
0159:  IORLW  30
015A:  MOVWF  35
015B:  MOVWF  36
015C:  CALL   093
.................... data(c[2]|0x30); 
015D:  MOVF   32,W
015E:  IORLW  30
015F:  MOVWF  35
0160:  MOVWF  36
0161:  CALL   093
.................... data(c[1]|0x30); 
0162:  MOVF   31,W
0163:  IORLW  30
0164:  MOVWF  35
0165:  MOVWF  36
0166:  CALL   093
.................... data(c[0]|0x30); 
0167:  MOVF   30,W
0168:  IORLW  30
0169:  MOVWF  35
016A:  MOVWF  36
016B:  CALL   093
.................... delay_ms(250); 
016C:  MOVLW  FA
016D:  MOVWF  37
016E:  CALL   076
.................... } 
016F:  BCF    0A.3
0170:  BCF    0A.4
0171:  GOTO   1F2 (RETURN)
