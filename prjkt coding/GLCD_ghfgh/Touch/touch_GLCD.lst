CCS PCM C Compiler, Version 5.008, 5967               17-Feb-14 22:05

               Filename:   C:\Users\GRT-Embedded\Desktop\GLCD\Touch\touch_GLCD.lst

               ROM used:   554 words (7%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           31 (8%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1C5
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  DATA 20,10
0005:  DATA D4,27
0006:  DATA D5,21
0007:  DATA 48,10
0008:  DATA D3,21
0009:  DATA D2,22
000A:  DATA 45,27
000B:  DATA 20,10
000C:  DATA 00,00
000D:  DATA 20,10
000E:  DATA 20,10
000F:  DATA A0,29
0010:  DATA D9,29
0011:  DATA D4,22
0012:  DATA 4D,10
0013:  DATA 20,10
0014:  DATA 20,10
0015:  DATA 00,00
0016:  DATA 58,1D
0017:  DATA 00,00
0018:  DATA 59,1D
0019:  DATA 00,00
*
0042:  MOVF   0B,W
0043:  MOVWF  21
0044:  BCF    0B.7
0045:  BSF    03.5
0046:  BSF    03.6
0047:  BSF    0C.7
0048:  BSF    0C.0
0049:  NOP
004A:  NOP
004B:  BCF    03.5
004C:  MOVF   0C,W
004D:  ANDLW  7F
004E:  BTFSC  03.2
004F:  GOTO   089
0050:  BCF    03.6
0051:  MOVWF  22
0052:  BSF    03.6
0053:  MOVF   0D,W
0054:  BCF    03.6
0055:  MOVWF  23
0056:  BSF    03.6
0057:  MOVF   0F,W
0058:  BCF    03.6
0059:  MOVWF  24
005A:  MOVF   22,W
005B:  MOVWF  25
005C:  CALL   038
005D:  MOVF   23,W
005E:  BSF    03.6
005F:  MOVWF  0D
0060:  BCF    03.6
0061:  MOVF   24,W
0062:  BSF    03.6
0063:  MOVWF  0F
0064:  BSF    03.5
0065:  BSF    0C.7
0066:  BSF    0C.0
0067:  NOP
0068:  NOP
0069:  BCF    03.5
006A:  RLF    0C,W
006B:  RLF    0E,W
006C:  ANDLW  7F
006D:  BTFSC  03.2
006E:  GOTO   089
006F:  BCF    03.6
0070:  MOVWF  22
0071:  BSF    03.6
0072:  MOVF   0D,W
0073:  BCF    03.6
0074:  MOVWF  23
0075:  BSF    03.6
0076:  MOVF   0F,W
0077:  BCF    03.6
0078:  MOVWF  24
0079:  MOVF   22,W
007A:  MOVWF  25
007B:  CALL   038
007C:  MOVF   23,W
007D:  BSF    03.6
007E:  MOVWF  0D
007F:  BCF    03.6
0080:  MOVF   24,W
0081:  BSF    03.6
0082:  MOVWF  0F
0083:  INCF   0D,F
0084:  BTFSC  03.2
0085:  INCF   0F,F
0086:  BCF    03.6
0087:  GOTO   045
0088:  BSF    03.6
0089:  BCF    03.6
008A:  BTFSC  21.7
008B:  BSF    0B.7
008C:  RETURN
008D:  MOVF   38,W
008E:  CLRF   78
008F:  SUBWF  37,W
0090:  BTFSC  03.0
0091:  GOTO   095
0092:  MOVF   37,W
0093:  MOVWF  77
0094:  GOTO   0A1
0095:  CLRF   77
0096:  MOVLW  08
0097:  MOVWF  39
0098:  RLF    37,F
0099:  RLF    77,F
009A:  MOVF   38,W
009B:  SUBWF  77,W
009C:  BTFSC  03.0
009D:  MOVWF  77
009E:  RLF    78,F
009F:  DECFSZ 39,F
00A0:  GOTO   098
00A1:  RETURN
*
019B:  CLRF   77
019C:  CLRF   78
019D:  MOVF   37,W
019E:  BCF    03.0
019F:  BTFSC  38.0
01A0:  ADDWF  77,F
01A1:  RRF    77,F
01A2:  RRF    78,F
01A3:  BTFSC  38.1
01A4:  ADDWF  77,F
01A5:  RRF    77,F
01A6:  RRF    78,F
01A7:  BTFSC  38.2
01A8:  ADDWF  77,F
01A9:  RRF    77,F
01AA:  RRF    78,F
01AB:  BTFSC  38.3
01AC:  ADDWF  77,F
01AD:  RRF    77,F
01AE:  RRF    78,F
01AF:  BTFSC  38.4
01B0:  ADDWF  77,F
01B1:  RRF    77,F
01B2:  RRF    78,F
01B3:  BTFSC  38.5
01B4:  ADDWF  77,F
01B5:  RRF    77,F
01B6:  RRF    78,F
01B7:  BTFSC  38.6
01B8:  ADDWF  77,F
01B9:  RRF    77,F
01BA:  RRF    78,F
01BB:  BTFSC  38.7
01BC:  ADDWF  77,F
01BD:  RRF    77,F
01BE:  RRF    78,F
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #use delay(clock=11059200) 
*
001A:  MOVLW  37
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02D
0020:  MOVLW  03
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  95
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 00,F
002C:  GOTO   020
002D:  RETURN
....................  
.................... #byte trisa=0x85 
.................... #byte porta=0x05 
....................  
.................... #byte trisd=0x88 
.................... #byte portd=0x08 
....................  
.................... #byte trise=0x89 
.................... #byte porte=0x09 
....................  
....................  
.................... #byte adcon0=0x1f 
.................... #byte adcon1=0x9f 
.................... #byte adresh=0x1e 
.................... #byte adresl=0x9e 
....................  
.................... #bit GO=0x1f.2 
....................  
.................... #bit reg=porte.0 
.................... #bit rw=porte.1 
.................... #bit en=porte.2 
....................  
....................  
.................... #bit TOUCH_X1= porta.0 
.................... #bit TOUCH_X2= porta.2 
....................  
.................... #bit TOUCH_Y1= porta.1 
.................... #bit TOUCH_Y2 =porta.5 
.................... void command(unsigned int); 
....................  
.................... void data(unsigned int); 
....................  
.................... #include "Header_Touch.h" 
.................... unsigned char read_touch() 
*
00B1:  CLRF   30
00B2:  CLRF   31
00B3:  CLRF   32
00B4:  CLRF   35
00B5:  CLRF   36
.................... { 
....................    unsigned char array[15]={0}, pre_count=0, pre_value=0, count=0, i, j, x_value=0, y_value=0; 
*
00A2:  CLRF   21
00A3:  CLRF   22
00A4:  CLRF   23
00A5:  CLRF   24
00A6:  CLRF   25
00A7:  CLRF   26
00A8:  CLRF   27
00A9:  CLRF   28
00AA:  CLRF   29
00AB:  CLRF   2A
00AC:  CLRF   2B
00AD:  CLRF   2C
00AE:  CLRF   2D
00AF:  CLRF   2E
00B0:  CLRF   2F
....................     
....................    for(i=0; i<15; i++) 
*
00B6:  CLRF   33
00B7:  MOVF   33,W
00B8:  SUBLW  0E
00B9:  BTFSS  03.0
00BA:  GOTO   0D8
....................    { 
....................       trisa=0x05; 
00BB:  MOVLW  05
00BC:  BSF    03.5
00BD:  MOVWF  05
....................       TOUCH_Y1=0; 
00BE:  BCF    03.5
00BF:  BCF    05.1
....................       TOUCH_Y2=1; 
00C0:  BSF    05.5
....................        
....................       adcon0=0x81; 
00C1:  MOVLW  81
00C2:  MOVWF  1F
....................       adcon1=0x42; 
00C3:  MOVLW  42
00C4:  BSF    03.5
00C5:  MOVWF  1F
....................        
....................       delay_ms(10); 
00C6:  MOVLW  0A
00C7:  BCF    03.5
00C8:  MOVWF  37
00C9:  CALL   01A
....................       go=1; 
00CA:  BSF    1F.2
....................       delay_ms(1); 
00CB:  MOVLW  01
00CC:  MOVWF  37
00CD:  CALL   01A
....................       while(go); 
00CE:  BTFSC  1F.2
00CF:  GOTO   0CE
....................       array[i]=adresh; 
00D0:  MOVLW  21
00D1:  ADDWF  33,W
00D2:  MOVWF  04
00D3:  BCF    03.7
00D4:  MOVF   1E,W
00D5:  MOVWF  00
00D6:  INCF   33,F
00D7:  GOTO   0B7
....................    } 
....................  
....................     for(i=0;i<14;i++) 
00D8:  CLRF   33
00D9:  MOVF   33,W
00DA:  SUBLW  0D
00DB:  BTFSS  03.0
00DC:  GOTO   11F
....................    { 
....................       for(j=i,count=0;j<14;j++) 
00DD:  MOVF   33,W
00DE:  MOVWF  34
00DF:  CLRF   32
00E0:  MOVF   34,W
00E1:  SUBLW  0D
00E2:  BTFSS  03.0
00E3:  GOTO   115
....................       { 
....................          //if(array[i]==array[j]) 
....................          if(((array[i]-array[j])<5) || ((array[j]-array[i])<5)) 
00E4:  MOVLW  21
00E5:  ADDWF  33,W
00E6:  MOVWF  04
00E7:  BCF    03.7
00E8:  MOVF   00,W
00E9:  MOVWF  37
00EA:  MOVLW  21
00EB:  ADDWF  34,W
00EC:  MOVWF  04
00ED:  BCF    03.7
00EE:  MOVF   00,W
00EF:  SUBWF  37,W
00F0:  SUBLW  04
00F1:  BTFSC  03.0
00F2:  GOTO   102
00F3:  MOVLW  21
00F4:  ADDWF  34,W
00F5:  MOVWF  04
00F6:  BCF    03.7
00F7:  MOVF   00,W
00F8:  MOVWF  37
00F9:  MOVLW  21
00FA:  ADDWF  33,W
00FB:  MOVWF  04
00FC:  BCF    03.7
00FD:  MOVF   00,W
00FE:  SUBWF  37,W
00FF:  SUBLW  04
0100:  BTFSS  03.0
0101:  GOTO   113
....................          { 
....................             count++; 
0102:  INCF   32,F
....................             if(j==13) 
0103:  MOVF   34,W
0104:  SUBLW  0D
0105:  BTFSS  03.2
0106:  GOTO   113
....................             { 
....................                if(pre_count<count) 
0107:  MOVF   32,W
0108:  SUBWF  30,W
0109:  BTFSC  03.0
010A:  GOTO   113
....................                { 
....................                   pre_count=count; 
010B:  MOVF   32,W
010C:  MOVWF  30
....................                   pre_value=array[i]; 
010D:  MOVLW  21
010E:  ADDWF  33,W
010F:  MOVWF  04
0110:  BCF    03.7
0111:  MOVF   00,W
0112:  MOVWF  31
....................                } 
....................             } 
....................          } 
0113:  INCF   34,F
0114:  GOTO   0E0
....................       } 
....................      
....................      if(pre_count>10) 
0115:  MOVF   30,W
0116:  SUBLW  0A
0117:  BTFSC  03.0
0118:  GOTO   11C
....................       x_value=pre_value; 
0119:  MOVF   31,W
011A:  MOVWF  35
011B:  GOTO   11D
....................        
....................      else 
....................       x_value=0; 
011C:  CLRF   35
011D:  INCF   33,F
011E:  GOTO   0D9
....................    } 
....................     
....................    pre_count=0; 
011F:  CLRF   30
....................     
....................    ///////////////////// Y VALUE ///////////////// 
....................     
....................    for(i=0; i<15; i++) 
0120:  CLRF   33
0121:  MOVF   33,W
0122:  SUBLW  0E
0123:  BTFSS  03.0
0124:  GOTO   142
....................    { 
....................       trisa=0x22; 
0125:  MOVLW  22
0126:  BSF    03.5
0127:  MOVWF  05
....................       TOUCH_X1=0; 
0128:  BCF    03.5
0129:  BCF    05.0
....................       TOUCH_X2=1; 
012A:  BSF    05.2
....................        
....................       adcon0=0x89; 
012B:  MOVLW  89
012C:  MOVWF  1F
....................       adcon1=0x42; 
012D:  MOVLW  42
012E:  BSF    03.5
012F:  MOVWF  1F
....................        
....................       delay_ms(10); 
0130:  MOVLW  0A
0131:  BCF    03.5
0132:  MOVWF  37
0133:  CALL   01A
....................       go=1; 
0134:  BSF    1F.2
....................       delay_ms(1); 
0135:  MOVLW  01
0136:  MOVWF  37
0137:  CALL   01A
....................       while(go); 
0138:  BTFSC  1F.2
0139:  GOTO   138
....................       array[i]=adresh; 
013A:  MOVLW  21
013B:  ADDWF  33,W
013C:  MOVWF  04
013D:  BCF    03.7
013E:  MOVF   1E,W
013F:  MOVWF  00
0140:  INCF   33,F
0141:  GOTO   121
....................    } 
....................     
....................     
....................    for(i=0;i<14;i++) 
0142:  CLRF   33
0143:  MOVF   33,W
0144:  SUBLW  0D
0145:  BTFSS  03.0
0146:  GOTO   189
....................    { 
....................       for(j=i,count=0;j<14;j++) 
0147:  MOVF   33,W
0148:  MOVWF  34
0149:  CLRF   32
014A:  MOVF   34,W
014B:  SUBLW  0D
014C:  BTFSS  03.0
014D:  GOTO   17F
....................       { 
....................          //if(array[i]==array[j]) 
....................          if(((array[i]-array[j])<5) || ((array[j]-array[i])<5)) 
014E:  MOVLW  21
014F:  ADDWF  33,W
0150:  MOVWF  04
0151:  BCF    03.7
0152:  MOVF   00,W
0153:  MOVWF  37
0154:  MOVLW  21
0155:  ADDWF  34,W
0156:  MOVWF  04
0157:  BCF    03.7
0158:  MOVF   00,W
0159:  SUBWF  37,W
015A:  SUBLW  04
015B:  BTFSC  03.0
015C:  GOTO   16C
015D:  MOVLW  21
015E:  ADDWF  34,W
015F:  MOVWF  04
0160:  BCF    03.7
0161:  MOVF   00,W
0162:  MOVWF  37
0163:  MOVLW  21
0164:  ADDWF  33,W
0165:  MOVWF  04
0166:  BCF    03.7
0167:  MOVF   00,W
0168:  SUBWF  37,W
0169:  SUBLW  04
016A:  BTFSS  03.0
016B:  GOTO   17D
....................          { 
....................             count++; 
016C:  INCF   32,F
....................             if(j==13) 
016D:  MOVF   34,W
016E:  SUBLW  0D
016F:  BTFSS  03.2
0170:  GOTO   17D
....................             { 
....................                if(pre_count<count) 
0171:  MOVF   32,W
0172:  SUBWF  30,W
0173:  BTFSC  03.0
0174:  GOTO   17D
....................                { 
....................                   pre_count=count; 
0175:  MOVF   32,W
0176:  MOVWF  30
....................                   pre_value=array[i]; 
0177:  MOVLW  21
0178:  ADDWF  33,W
0179:  MOVWF  04
017A:  BCF    03.7
017B:  MOVF   00,W
017C:  MOVWF  31
....................                } 
....................             } 
....................          } 
017D:  INCF   34,F
017E:  GOTO   14A
....................       } 
....................      
....................      if(pre_count>10) 
017F:  MOVF   30,W
0180:  SUBLW  0A
0181:  BTFSC  03.0
0182:  GOTO   186
....................       y_value=pre_value; 
0183:  MOVF   31,W
0184:  MOVWF  36
0185:  GOTO   187
....................        
....................      else 
....................       y_value=0; 
0186:  CLRF   36
0187:  INCF   33,F
0188:  GOTO   143
....................    } 
....................    x_value=x_value/26; 
0189:  MOVF   35,W
018A:  MOVWF  37
018B:  MOVLW  1A
018C:  MOVWF  38
018D:  CALL   08D
018E:  MOVF   78,W
018F:  MOVWF  35
....................    y_value=y_value/26; 
0190:  MOVF   36,W
0191:  MOVWF  37
0192:  MOVLW  1A
0193:  MOVWF  38
0194:  CALL   08D
0195:  MOVF   78,W
0196:  MOVWF  36
....................     
....................   // return ((x_value & 0xf0)|((y_value>>8) & 0x0f)); 
....................    
....................   return ((x_value*10)+(y_value)); 
0197:  MOVF   35,W
0198:  MOVWF  37
0199:  MOVLW  0A
019A:  MOVWF  38
*
01BF:  MOVF   36,W
01C0:  ADDWF  78,W
01C1:  MOVWF  78
01C2:  BCF    0A.3
01C3:  BCF    0A.4
01C4:  GOTO   20F (RETURN)
....................     
.................... } 
....................  
....................  
....................  
.................... unsigned int resolution; 
....................  
....................  
....................  
.................... //int16 adc_value1=0, adc_value2=0; 
....................  
.................... void display1(int16); 
.................... void display2(int16); 
....................  
.................... void command(unsigned int com) 
.................... { 
....................    reg=0; 
*
002E:  BCF    09.0
....................    rw=0; 
002F:  BCF    09.1
....................    portd=com; 
0030:  MOVF   21,W
0031:  MOVWF  08
....................    en=1; 
0032:  BSF    09.2
....................    delay_ms(1); 
0033:  MOVLW  01
0034:  MOVWF  37
0035:  CALL   01A
....................    en=0; 
0036:  BCF    09.2
0037:  RETURN
.................... } 
....................  
.................... void data(unsigned int dat) 
.................... { 
....................    reg=1; 
0038:  BSF    09.0
....................    rw=0; 
0039:  BCF    09.1
....................    portd=dat; 
003A:  MOVF   25,W
003B:  MOVWF  08
....................    en=1; 
003C:  BSF    09.2
....................    delay_ms(1); 
003D:  MOVLW  01
003E:  MOVWF  37
003F:  CALL   01A
....................    en=0; 
0040:  BCF    09.2
0041:  RETURN
.................... } 
....................  
....................  
....................  
.................... void main() 
*
01C5:  MOVF   03,W
01C6:  ANDLW  1F
01C7:  MOVWF  03
01C8:  BSF    03.5
01C9:  BSF    1F.0
01CA:  BSF    1F.1
01CB:  BSF    1F.2
01CC:  BCF    1F.3
01CD:  MOVLW  07
01CE:  MOVWF  1C
01CF:  BCF    03.7
.................... { 
....................  
....................    porta=0x00; 
01D0:  BCF    03.5
01D1:  CLRF   05
....................     
....................    trisd=0x00; 
01D2:  BSF    03.5
01D3:  CLRF   08
....................    portd=0x00; 
01D4:  BCF    03.5
01D5:  CLRF   08
....................     
....................    trise=0x00; 
01D6:  BSF    03.5
01D7:  CLRF   09
....................    porte=0x00; 
01D8:  BCF    03.5
01D9:  CLRF   09
....................     
....................    ADRESH=0x00; 
01DA:  CLRF   1E
....................    ADRESL=0x00; 
01DB:  BSF    03.5
01DC:  CLRF   1E
....................  
....................     
....................    command(0x38); 
01DD:  MOVLW  38
01DE:  BCF    03.5
01DF:  MOVWF  21
01E0:  CALL   02E
....................    command(0x0c); 
01E1:  MOVLW  0C
01E2:  MOVWF  21
01E3:  CALL   02E
....................    command(0x06); 
01E4:  MOVLW  06
01E5:  MOVWF  21
01E6:  CALL   02E
....................    command(0x01); 
01E7:  MOVLW  01
01E8:  MOVWF  21
01E9:  CALL   02E
....................    delay_ms(2); 
01EA:  MOVLW  02
01EB:  MOVWF  37
01EC:  CALL   01A
....................     
....................    command(0x80); 
01ED:  MOVLW  80
01EE:  MOVWF  21
01EF:  CALL   02E
....................    data("  TOUCH SCREEN  "); 
01F0:  MOVLW  04
01F1:  BSF    03.6
01F2:  MOVWF  0D
01F3:  MOVLW  00
01F4:  MOVWF  0F
01F5:  BCF    03.6
01F6:  CALL   042
....................    command(0xc0); 
01F7:  MOVLW  C0
01F8:  MOVWF  21
01F9:  CALL   02E
....................    data("     SYSTEM     "); 
01FA:  MOVLW  0D
01FB:  BSF    03.6
01FC:  MOVWF  0D
01FD:  MOVLW  00
01FE:  MOVWF  0F
01FF:  BCF    03.6
0200:  CALL   042
....................    delay_ms(500); 
0201:  MOVLW  02
0202:  MOVWF  21
0203:  MOVLW  FA
0204:  MOVWF  37
0205:  CALL   01A
0206:  DECFSZ 21,F
0207:  GOTO   203
....................    command(0x01); 
0208:  MOVLW  01
0209:  MOVWF  21
020A:  CALL   02E
....................    delay_ms(2); 
020B:  MOVLW  02
020C:  MOVWF  37
020D:  CALL   01A
....................  
....................    while(1) 
....................    { 
....................       
....................      Resolution=read_touch(); 
020E:  GOTO   0A2
020F:  MOVF   78,W
0210:  MOVWF  20
....................       
....................      command(0x80); 
0211:  MOVLW  80
0212:  MOVWF  21
0213:  CALL   02E
....................      data((Resolution/10)|0x30); 
0214:  MOVF   20,W
0215:  MOVWF  37
0216:  MOVLW  0A
0217:  MOVWF  38
0218:  CALL   08D
0219:  MOVF   78,W
021A:  IORLW  30
021B:  MOVWF  21
021C:  MOVWF  25
021D:  CALL   038
....................      data((Resolution%10)|0x30); 
021E:  MOVF   20,W
021F:  MOVWF  37
0220:  MOVLW  0A
0221:  MOVWF  38
0222:  CALL   08D
0223:  MOVF   77,W
0224:  IORLW  30
0225:  MOVWF  21
0226:  MOVWF  25
0227:  CALL   038
0228:  GOTO   20E
....................      /* adresh=0x00; 
....................       adresl=0x00; 
....................        
....................       trisa=0x05; 
....................       Y1=0; Y2=1;   
....................  
....................       adcon0=0x81; 
....................       adcon1=0x42; 
....................       delay_ms(10); 
....................       GO=1;  
....................       while(GO==1);  
....................       adc_value1=make16(ADRESH,ADRESL);         
....................        
....................       display1(adc_value1); 
....................        
....................       delay_ms(500); 
....................        
....................       ///////////////////////////////// 
....................        
....................       adresh=0x00; 
....................       adresl=0x00; 
....................        
....................       trisa=0x22; 
....................       X1=0; X2=1; 
....................        
....................   
....................       adcon0=0x89; 
....................       adcon1=0x42; 
....................       delay_ms(10); 
....................       GO=1; 
....................       while(GO==1); 
....................       adc_value2=make16(ADRESH,ADRESL);           
....................        
....................       display2(adc_value2); 
....................        
....................       delay_ms(500);*/ 
....................        
....................    } 
.................... } 
....................  
0229:  SLEEP
.................... void display1(int16 val) 
.................... { 
....................    int8 a[4],i; 
....................    for(i=0;i<4;i++) 
....................    { 
....................       a[i]=val%10; 
....................       val=val/10; 
....................    } 
....................    
....................    command(0x80); 
....................    data("X:"); 
....................    data(a[3]|0x30); 
....................    data(a[2]|0x30); 
....................    data(a[1]|0x30); 
....................    data(a[0]|0x30); 
....................    delay_ms(10); 
....................    } 
....................     
.................... void display2(int16 val) 
.................... { 
....................    int8 a[4],i; 
....................    for(i=0;i<4;i++) 
....................    { 
....................       a[i]=val%10; 
....................       val=val/10; 
....................    } 
....................    
....................    command(0xc0); 
....................    data("Y:"); 
....................    data(a[3]|0x30); 
....................    data(a[2]|0x30); 
....................    data(a[1]|0x30); 
....................    data(a[0]|0x30); 
....................    delay_ms(10); 
....................    }    
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
