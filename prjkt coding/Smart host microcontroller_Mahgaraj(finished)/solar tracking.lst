CCS PCM C Compiler, Version 3.249, 33340               03-Apr-14 22:34

               Filename: E:\Ganesh Potti\Ganesh Projects\Engineers Projects\Smart school management system_Mahgaraj\solar tracking.lst

               ROM used: 1093 words (13%)
                         Largest free fragment is 2048
               RAM used: 33 (19%) at main() level
                         45 (26%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   217
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.3
001A:  GOTO   01D
001B:  BTFSC  0B.0
001C:  GOTO   034
001D:  BTFSS  0B.5
001E:  GOTO   021
001F:  BTFSC  0B.2
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   089
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   0B1
.................... #include<16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
.................... #use delay(clock=11059200) 
*
00BC:  MOVLW  43
00BD:  MOVWF  04
00BE:  MOVF   00,W
00BF:  BTFSC  03.2
00C0:  GOTO   0CE
00C1:  MOVLW  03
00C2:  MOVWF  78
00C3:  CLRF   77
00C4:  DECFSZ 77,F
00C5:  GOTO   0C4
00C6:  DECFSZ 78,F
00C7:  GOTO   0C3
00C8:  MOVLW  95
00C9:  MOVWF  77
00CA:  DECFSZ 77,F
00CB:  GOTO   0CA
00CC:  DECFSZ 00,F
00CD:  GOTO   0C1
00CE:  RETLW  00
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
....................  
.................... #byte porta=0x05 
.................... #byte portb=0x06 
.................... #byte portc=0x07 
.................... #byte portd=0x08 
.................... #byte porte=0x09 
....................  
.................... #byte trisa=0x85 
.................... #byte trisb=0x86 
.................... #byte trisc=0x87 
.................... #byte trisd=0x88 
.................... #byte trise=0x89 
....................  
.................... #byte option_reg=0x81 
.................... #byte intcon=0x0b 
....................  
.................... #bit reg=porte.0 
.................... #bit rw=porte.1 
.................... #bit en=porte.2 
....................  
.................... #bit RF_1=portb.4 
.................... #bit RF_2=portb.5 
.................... #bit RF_3=portb.6 
.................... #bit RF_4=portb.7 
....................  
.................... #bit FORWARD=portb.0 
.................... #bit REVERSE=portb.1 
....................  
.................... #bit BATTERY_1=portb.2 
.................... #bit BATTERY_2=portb.3 
....................  
.................... #bit MOTOR1_P = portc.0 
.................... #bit MOTOR1_N = portc.1 
....................  
.................... #bit MOTOR2_P = portc.6 
.................... #bit MOTOR2_N = portc.7 
....................  
.................... #bit MOTOR3_P = portc.2 
.................... #bit MOTOR3_N = portc.3 
....................  
.................... #bit MOTOR4_P = portc.5 
.................... #bit MOTOR4_N = portc.4 
....................  
.................... unsigned int16 value1=0, value2=0, value3=0, value4=0; 
*
0221:  BCF    03.5
0222:  CLRF   28
0223:  CLRF   29
0224:  CLRF   2A
0225:  CLRF   2B
0226:  CLRF   2C
0227:  CLRF   2D
0228:  CLRF   2E
0229:  CLRF   2F
.................... unsigned char sec = 0, time = 0 , A=0 , GLAG = 0; 
022A:  CLRF   30
022B:  CLRF   31
022C:  CLRF   32
022D:  CLRF   33
.................... int1 flag=0, LDR1_FLAG=0, LDR2_FLAG=0; 
022E:  BCF    34.0
022F:  BCF    34.1
0230:  BCF    34.2
.................... int z=0 , b[4]={0}; 
0231:  CLRF   35
0232:  CLRF   36
0233:  CLRF   37
0234:  CLRF   38
0235:  CLRF   39
.................... void display(unsigned int16 n); 
.................... void command(unsigned char com); 
.................... void data(unsigned char da); 
....................  
.................... #INT_RB 
.................... RB_ISR() 
.................... { 
....................       while(RF_1==1) 
....................       { 
*
0089:  BTFSS  06.4
008A:  GOTO   090
....................         MOTOR1_P=1; MOTOR2_P=1; MOTOR3_P=1; MOTOR4_P=1;  
008B:  BSF    07.0
008C:  BSF    07.6
008D:  BSF    07.2
008E:  BSF    07.5
....................       } 
008F:  GOTO   089
....................         RF_1=0; 
0090:  BCF    06.4
....................       while(RF_2==1) 
....................       { 
0091:  BTFSS  06.5
0092:  GOTO   098
....................         MOTOR1_N=1; MOTOR2_N=1; MOTOR3_N=1; MOTOR4_N=1;  
0093:  BSF    07.1
0094:  BSF    07.7
0095:  BSF    07.3
0096:  BSF    07.4
....................       } 
0097:  GOTO   091
....................         RF_2=0; 
0098:  BCF    06.5
....................       while(RF_3==1) 
....................       { 
0099:  BTFSS  06.6
009A:  GOTO   09E
....................         MOTOR1_P=1; MOTOR4_P=1;   
009B:  BSF    07.0
009C:  BSF    07.5
....................       } 
009D:  GOTO   099
....................         RF_3=0; 
009E:  BCF    06.6
....................       while(RF_4==1) 
....................       { 
009F:  BTFSS  06.7
00A0:  GOTO   0A4
....................         MOTOR3_P=1; MOTOR2_P=1;  
00A1:  BSF    07.2
00A2:  BSF    07.6
....................       } 
00A3:  GOTO   09F
....................         RF_4=0; MOTOR3_P=0; MOTOR2_P=0; MOTOR1_P=0; MOTOR4_P=0; MOTOR1_N=0; MOTOR2_N=0; MOTOR3_N=0; MOTOR4_N=0; 
00A4:  BCF    06.7
00A5:  BCF    07.2
00A6:  BCF    07.6
00A7:  BCF    07.0
00A8:  BCF    07.5
00A9:  BCF    07.1
00AA:  BCF    07.7
00AB:  BCF    07.3
00AC:  BCF    07.4
.................... } 
....................  
00AD:  BCF    0B.0
00AE:  BCF    0A.3
00AF:  BCF    0A.4
00B0:  GOTO   021
.................... #int_TIMER0 
.................... TIMER0_isr() 
.................... { 
....................    time++; 
00B1:  INCF   31,F
....................    if(time>=43) 
00B2:  MOVF   31,W
00B3:  SUBLW  2A
00B4:  BTFSC  03.0
00B5:  GOTO   0B8
....................    { 
....................       time=0; 
00B6:  CLRF   31
....................       flag=1; 
00B7:  BSF    34.0
....................    } 
.................... } 
....................  
00B8:  BCF    0B.2
00B9:  BCF    0A.3
00BA:  BCF    0A.4
00BB:  GOTO   021
.................... void command(unsigned char com) 
.................... { 
....................    portd=com; 
*
00CF:  MOVF   41,W
00D0:  MOVWF  08
....................    reg=0; 
00D1:  BCF    09.0
....................    rw=0; 
00D2:  BCF    09.1
....................    en=1; 
00D3:  BSF    09.2
....................    delay_ms(1); 
00D4:  MOVLW  01
00D5:  MOVWF  43
00D6:  CALL   0BC
....................    en=0; 
00D7:  BCF    09.2
.................... } 
00D8:  RETLW  00
....................  
.................... void data(unsigned char da) 
.................... { 
....................    portd=da; 
00D9:  MOVF   42,W
00DA:  MOVWF  08
....................    reg=1; 
00DB:  BSF    09.0
....................    rw=0; 
00DC:  BCF    09.1
....................    en=1; 
00DD:  BSF    09.2
....................    delay_ms(1); 
00DE:  MOVLW  01
00DF:  MOVWF  43
00E0:  CALL   0BC
....................    en=0; 
00E1:  BCF    09.2
.................... } 
00E2:  RETLW  00
....................  
.................... void main() 
.................... { 
*
0217:  CLRF   04
0218:  MOVLW  1F
0219:  ANDWF  03,F
021A:  BSF    03.5
021B:  BSF    1F.0
021C:  BSF    1F.1
021D:  BSF    1F.2
021E:  BCF    1F.3
021F:  MOVLW  07
0220:  MOVWF  1C
....................  
....................    portd=0x00; 
*
0236:  CLRF   08
....................    trisd=0x00; 
0237:  BSF    03.5
0238:  CLRF   08
....................  
....................    porte=0x00; 
0239:  BCF    03.5
023A:  CLRF   09
....................    trise=0x00; 
023B:  BSF    03.5
023C:  CLRF   09
....................  
....................    portb=0x00; 
023D:  BCF    03.5
023E:  CLRF   06
....................    trisb=0xf0; 
023F:  MOVLW  F0
0240:  BSF    03.5
0241:  MOVWF  06
....................  
....................    portc=0x00; 
0242:  BCF    03.5
0243:  CLRF   07
....................    trisc=0x00; 
0244:  BSF    03.5
0245:  CLRF   07
....................  
....................    option_reg=0x00; 
0246:  CLRF   01
.................... 	intcon=0xc8; 
0247:  MOVLW  C8
0248:  BCF    03.5
0249:  MOVWF  0B
....................  
....................    command(0x38); 
024A:  MOVLW  38
024B:  MOVWF  41
024C:  CALL   0CF
....................    command(0x06); 
024D:  MOVLW  06
024E:  MOVWF  41
024F:  CALL   0CF
....................    command(0x0c); 
0250:  MOVLW  0C
0251:  MOVWF  41
0252:  CALL   0CF
....................  
....................    delay_ms(100); 
0253:  MOVLW  64
0254:  MOVWF  43
0255:  CALL   0BC
....................    command(0x80); 
0256:  MOVLW  80
0257:  MOVWF  41
0258:  CALL   0CF
....................    data("SOLAR TRACKING"); 
0259:  CLRF   3A
025A:  MOVF   3A,W
025B:  CALL   03A
025C:  IORLW  00
025D:  BTFSC  03.2
025E:  GOTO   263
025F:  INCF   3A,F
0260:  MOVWF  42
0261:  CALL   0D9
0262:  GOTO   25A
....................  
....................    set_timer0(0x00); //set TMR0 initial value to zero 
0263:  CLRF   01
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); //set timer0 mode 
0264:  BSF    03.5
0265:  MOVF   01,W
0266:  ANDLW  C0
0267:  IORLW  07
0268:  MOVWF  01
....................  
....................    enable_interrupts(INT_TIMER0); //enable timer overflow interrupt 
0269:  BCF    03.5
026A:  BSF    0B.5
....................  
....................    enable_interrupts(GLOBAL); //enable global interrupt 
026B:  MOVLW  C0
026C:  IORWF  0B,F
....................  
....................    setup_adc( ADC_CLOCK_INTERNAL ); 
026D:  BSF    03.5
026E:  BCF    1F.6
026F:  BCF    03.5
0270:  BSF    1F.6
0271:  BSF    1F.7
0272:  BSF    03.5
0273:  BSF    1F.7
0274:  BCF    03.5
0275:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN2_AN3_AN4); 
0276:  BSF    03.5
0277:  BCF    1F.0
0278:  BSF    1F.1
0279:  BCF    1F.2
027A:  BCF    1F.3
....................  
....................    delay_ms(2000); 
027B:  MOVLW  08
027C:  BCF    03.5
027D:  MOVWF  3A
027E:  MOVLW  FA
027F:  MOVWF  43
0280:  CALL   0BC
0281:  DECFSZ 3A,F
0282:  GOTO   27E
....................    command(0x01); 
0283:  MOVLW  01
0284:  MOVWF  41
0285:  CALL   0CF
....................    delay_ms(2); 
0286:  MOVLW  02
0287:  MOVWF  43
0288:  CALL   0BC
....................  
....................    while(1) 
....................    { 
....................  
....................          delay_ms(100); 
0289:  MOVLW  64
028A:  MOVWF  43
028B:  CALL   0BC
....................          set_adc_channel(0); 
028C:  MOVLW  00
028D:  MOVWF  78
028E:  MOVF   1F,W
028F:  ANDLW  C7
0290:  IORWF  78,W
0291:  MOVWF  1F
....................          delay_us(100);         //wait for the acquisition time 
0292:  MOVLW  5B
0293:  MOVWF  77
0294:  DECFSZ 77,F
0295:  GOTO   294
0296:  NOP
0297:  NOP
....................          value1=read_adc(); 
0298:  BSF    1F.2
0299:  BTFSC  1F.2
029A:  GOTO   299
029B:  BSF    03.5
029C:  MOVF   1E,W
029D:  BCF    03.5
029E:  MOVWF  28
029F:  MOVF   1E,W
02A0:  MOVWF  29
....................          delay_us(4); 
02A1:  MOVLW  03
02A2:  MOVWF  77
02A3:  DECFSZ 77,F
02A4:  GOTO   2A3
02A5:  NOP
....................  
....................          delay_ms(10); 
02A6:  MOVLW  0A
02A7:  MOVWF  43
02A8:  CALL   0BC
....................          set_adc_channel(1); 
02A9:  MOVLW  08
02AA:  MOVWF  78
02AB:  MOVF   1F,W
02AC:  ANDLW  C7
02AD:  IORWF  78,W
02AE:  MOVWF  1F
....................          delay_us(100);         //wait for the acquisition time 
02AF:  MOVLW  5B
02B0:  MOVWF  77
02B1:  DECFSZ 77,F
02B2:  GOTO   2B1
02B3:  NOP
02B4:  NOP
....................          value2=read_adc(); 
02B5:  BSF    1F.2
02B6:  BTFSC  1F.2
02B7:  GOTO   2B6
02B8:  BSF    03.5
02B9:  MOVF   1E,W
02BA:  BCF    03.5
02BB:  MOVWF  2A
02BC:  MOVF   1E,W
02BD:  MOVWF  2B
....................          delay_us(4); 
02BE:  MOVLW  03
02BF:  MOVWF  77
02C0:  DECFSZ 77,F
02C1:  GOTO   2C0
02C2:  NOP
....................  
....................          delay_ms(10); 
02C3:  MOVLW  0A
02C4:  MOVWF  43
02C5:  CALL   0BC
....................          set_adc_channel(2); 
02C6:  MOVLW  10
02C7:  MOVWF  78
02C8:  MOVF   1F,W
02C9:  ANDLW  C7
02CA:  IORWF  78,W
02CB:  MOVWF  1F
....................          delay_us(100);         //wait for the acquisition time 
02CC:  MOVLW  5B
02CD:  MOVWF  77
02CE:  DECFSZ 77,F
02CF:  GOTO   2CE
02D0:  NOP
02D1:  NOP
....................          value3=read_adc(); 
02D2:  BSF    1F.2
02D3:  BTFSC  1F.2
02D4:  GOTO   2D3
02D5:  BSF    03.5
02D6:  MOVF   1E,W
02D7:  BCF    03.5
02D8:  MOVWF  2C
02D9:  MOVF   1E,W
02DA:  MOVWF  2D
....................          value3=(value3*1.8); 
02DB:  MOVF   2D,W
02DC:  MOVWF  3B
02DD:  MOVF   2C,W
02DE:  MOVWF  3A
02DF:  GOTO   0E3
02E0:  MOVF   7A,W
02E1:  MOVWF  3D
02E2:  MOVF   79,W
02E3:  MOVWF  3C
02E4:  MOVF   78,W
02E5:  MOVWF  3B
02E6:  MOVF   77,W
02E7:  MOVWF  3A
02E8:  MOVLW  66
02E9:  MOVWF  41
02EA:  MOVWF  40
02EB:  MOVWF  3F
02EC:  MOVLW  7F
02ED:  MOVWF  3E
02EE:  GOTO   103
02EF:  MOVF   7A,W
02F0:  MOVWF  3D
02F1:  MOVF   79,W
02F2:  MOVWF  3C
02F3:  MOVF   78,W
02F4:  MOVWF  3B
02F5:  MOVF   77,W
02F6:  MOVWF  3A
02F7:  GOTO   17B
02F8:  MOVF   79,W
02F9:  MOVWF  2D
02FA:  MOVF   78,W
02FB:  MOVWF  2C
....................          delay_us(4); 
02FC:  MOVLW  03
02FD:  MOVWF  77
02FE:  DECFSZ 77,F
02FF:  GOTO   2FE
0300:  NOP
....................  
....................          delay_ms(10); 
0301:  MOVLW  0A
0302:  MOVWF  43
0303:  CALL   0BC
....................          set_adc_channel(3); 
0304:  MOVLW  18
0305:  MOVWF  78
0306:  MOVF   1F,W
0307:  ANDLW  C7
0308:  IORWF  78,W
0309:  MOVWF  1F
....................          delay_us(100);         //wait for the acquisition time 
030A:  MOVLW  5B
030B:  MOVWF  77
030C:  DECFSZ 77,F
030D:  GOTO   30C
030E:  NOP
030F:  NOP
....................          value4=read_adc(); 
0310:  BSF    1F.2
0311:  BTFSC  1F.2
0312:  GOTO   311
0313:  BSF    03.5
0314:  MOVF   1E,W
0315:  BCF    03.5
0316:  MOVWF  2E
0317:  MOVF   1E,W
0318:  MOVWF  2F
....................          value4=(value4*2); 
0319:  BCF    03.0
031A:  RLF    2E,F
031B:  RLF    2F,F
....................          delay_us(40); 
031C:  MOVLW  24
031D:  MOVWF  77
031E:  DECFSZ 77,F
031F:  GOTO   31E
0320:  NOP
....................  
....................  
....................          if((sec==0)|| (sec==06)) 
0321:  MOVF   30,F
0322:  BTFSC  03.2
0323:  GOTO   328
0324:  MOVF   30,W
0325:  SUBLW  06
0326:  BTFSS  03.2
0327:  GOTO   331
....................          { 
....................             delay_ms(100); 
0328:  MOVLW  64
0329:  MOVWF  43
032A:  CALL   0BC
....................             command(0x01); 
032B:  MOVLW  01
032C:  MOVWF  41
032D:  CALL   0CF
....................             delay_ms(2); 
032E:  MOVLW  02
032F:  MOVWF  43
0330:  CALL   0BC
....................          } 
....................  
....................          if(flag==1) 
0331:  BTFSS  34.0
0332:  GOTO   339
....................          { 
....................             flag=0; 
0333:  BCF    34.0
....................             sec++; 
0334:  INCF   30,F
....................               if(sec >= 12) 
0335:  MOVF   30,W
0336:  SUBLW  0B
0337:  BTFSS  03.0
....................                sec = 0; 
0338:  CLRF   30
....................          } 
....................              if(sec < 6) 
0339:  MOVF   30,W
033A:  SUBLW  05
033B:  BTFSS  03.0
033C:  GOTO   363
....................               { 
....................                   z=0; 
033D:  CLRF   35
....................                   command(0x80); 
033E:  MOVLW  80
033F:  MOVWF  41
0340:  CALL   0CF
....................                   data("L1:"); 
0341:  CLRF   3A
0342:  MOVF   3A,W
0343:  CALL   04D
0344:  IORLW  00
0345:  BTFSC  03.2
0346:  GOTO   34B
0347:  INCF   3A,F
0348:  MOVWF  42
0349:  CALL   0D9
034A:  GOTO   342
....................                   display(value1); 
034B:  MOVF   29,W
034C:  MOVWF  3B
034D:  MOVF   28,W
034E:  MOVWF  3A
034F:  CALL   1C3
....................  
....................                   command(0xc0); 
0350:  MOVLW  C0
0351:  MOVWF  41
0352:  CALL   0CF
....................                   data("L2:"); 
0353:  CLRF   3A
0354:  MOVF   3A,W
0355:  CALL   055
0356:  IORLW  00
0357:  BTFSC  03.2
0358:  GOTO   35D
0359:  INCF   3A,F
035A:  MOVWF  42
035B:  CALL   0D9
035C:  GOTO   354
....................                   display(value2); 
035D:  MOVF   2B,W
035E:  MOVWF  3B
035F:  MOVF   2A,W
0360:  MOVWF  3A
0361:  CALL   1C3
....................  
....................               } 
....................              else if(sec>=6) 
0362:  GOTO   3E9
0363:  MOVF   30,W
0364:  SUBLW  05
0365:  BTFSC  03.0
0366:  GOTO   3E9
....................                { 
....................                   z=1; 
0367:  MOVLW  01
0368:  MOVWF  35
....................                   command(0x80); 
0369:  MOVLW  80
036A:  MOVWF  41
036B:  CALL   0CF
....................                   data("BATTERY1:"); 
036C:  CLRF   3A
036D:  MOVF   3A,W
036E:  CALL   05D
036F:  IORLW  00
0370:  BTFSC  03.2
0371:  GOTO   376
0372:  INCF   3A,F
0373:  MOVWF  42
0374:  CALL   0D9
0375:  GOTO   36D
....................                   display(value3); 
0376:  MOVF   2D,W
0377:  MOVWF  3B
0378:  MOVF   2C,W
0379:  MOVWF  3A
037A:  CALL   1C3
....................  
....................                   command(0xC0); 
037B:  MOVLW  C0
037C:  MOVWF  41
037D:  CALL   0CF
....................                   data("BATTERY2:"); 
037E:  CLRF   3A
037F:  MOVF   3A,W
0380:  CALL   06B
0381:  IORLW  00
0382:  BTFSC  03.2
0383:  GOTO   388
0384:  INCF   3A,F
0385:  MOVWF  42
0386:  CALL   0D9
0387:  GOTO   37F
....................                   display(value4); 
0388:  MOVF   2F,W
0389:  MOVWF  3B
038A:  MOVF   2E,W
038B:  MOVWF  3A
038C:  CALL   1C3
....................                    
....................                   if((value3) > (value4)) 
038D:  MOVF   2F,W
038E:  SUBWF  2D,W
038F:  BTFSS  03.0
0390:  GOTO   3A4
0391:  BTFSS  03.2
0392:  GOTO   397
0393:  MOVF   2C,W
0394:  SUBWF  2E,W
0395:  BTFSC  03.0
0396:  GOTO   3A4
....................                   { 
....................                   command(0x8d); 
0397:  MOVLW  8D
0398:  MOVWF  41
0399:  CALL   0CF
....................                   data("DIS"); 
039A:  CLRF   3A
039B:  MOVF   3A,W
039C:  CALL   079
039D:  IORLW  00
039E:  BTFSC  03.2
039F:  GOTO   3A4
03A0:  INCF   3A,F
03A1:  MOVWF  42
03A2:  CALL   0D9
03A3:  GOTO   39B
....................                   } 
....................                   if((value3) < (value4)) 
03A4:  MOVF   2D,W
03A5:  SUBWF  2F,W
03A6:  BTFSS  03.0
03A7:  GOTO   3BB
03A8:  BTFSS  03.2
03A9:  GOTO   3AE
03AA:  MOVF   2E,W
03AB:  SUBWF  2C,W
03AC:  BTFSC  03.0
03AD:  GOTO   3BB
....................                   { 
....................                   command(0x8d); 
03AE:  MOVLW  8D
03AF:  MOVWF  41
03B0:  CALL   0CF
....................                   data("CHA"); 
03B1:  CLRF   3A
03B2:  MOVF   3A,W
03B3:  CALL   081
03B4:  IORLW  00
03B5:  BTFSC  03.2
03B6:  GOTO   3BB
03B7:  INCF   3A,F
03B8:  MOVWF  42
03B9:  CALL   0D9
03BA:  GOTO   3B2
....................                    
....................                   } 
....................                   if((value4) > (value3)) 
03BB:  MOVF   2D,W
03BC:  SUBWF  2F,W
03BD:  BTFSS  03.0
03BE:  GOTO   3D2
03BF:  BTFSS  03.2
03C0:  GOTO   3C5
03C1:  MOVF   2E,W
03C2:  SUBWF  2C,W
03C3:  BTFSC  03.0
03C4:  GOTO   3D2
....................                   { 
....................                   command(0xcd); 
03C5:  MOVLW  CD
03C6:  MOVWF  41
03C7:  CALL   0CF
....................                   data("DIS"); 
03C8:  CLRF   3A
03C9:  MOVF   3A,W
03CA:  CALL   079
03CB:  IORLW  00
03CC:  BTFSC  03.2
03CD:  GOTO   3D2
03CE:  INCF   3A,F
03CF:  MOVWF  42
03D0:  CALL   0D9
03D1:  GOTO   3C9
....................                   } 
....................                   if((value4) < (value3)) 
03D2:  MOVF   2F,W
03D3:  SUBWF  2D,W
03D4:  BTFSS  03.0
03D5:  GOTO   3E9
03D6:  BTFSS  03.2
03D7:  GOTO   3DC
03D8:  MOVF   2C,W
03D9:  SUBWF  2E,W
03DA:  BTFSC  03.0
03DB:  GOTO   3E9
....................                   { 
....................                   command(0xcd); 
03DC:  MOVLW  CD
03DD:  MOVWF  41
03DE:  CALL   0CF
....................                   data("CHA"); 
03DF:  CLRF   3A
03E0:  MOVF   3A,W
03E1:  CALL   081
03E2:  IORLW  00
03E3:  BTFSC  03.2
03E4:  GOTO   3E9
03E5:  INCF   3A,F
03E6:  MOVWF  42
03E7:  CALL   0D9
03E8:  GOTO   3E0
....................                   } 
....................  
....................                } 
....................  
....................              if((value1>value2) && (LDR1_FLAG==0)) 
03E9:  MOVF   2B,W
03EA:  SUBWF  29,W
03EB:  BTFSS  03.0
03EC:  GOTO   403
03ED:  BTFSS  03.2
03EE:  GOTO   3F3
03EF:  MOVF   28,W
03F0:  SUBWF  2A,W
03F1:  BTFSC  03.0
03F2:  GOTO   403
03F3:  BTFSC  34.1
03F4:  GOTO   403
....................               { 
....................                   IF(LDR2_FLAG==1) 
03F5:  BTFSS  34.2
03F6:  GOTO   401
....................                    { 
....................                      REVERSE=1; 
03F7:  BSF    06.1
....................                      FORWARD=0; 
03F8:  BCF    06.0
....................                      DELAY_MS(500); 
03F9:  MOVLW  02
03FA:  MOVWF  3A
03FB:  MOVLW  FA
03FC:  MOVWF  43
03FD:  CALL   0BC
03FE:  DECFSZ 3A,F
03FF:  GOTO   3FB
....................                      REVERSE=0; 
0400:  BCF    06.1
....................                    } 
....................                      LDR1_FLAG=1; 
0401:  BSF    34.1
....................                      LDR2_FLAG=0; 
0402:  BCF    34.2
....................               } 
....................  
....................  
....................              if((value2>value1) && (LDR2_FLAG==0)) 
0403:  MOVF   29,W
0404:  SUBWF  2B,W
0405:  BTFSS  03.0
0406:  GOTO   41D
0407:  BTFSS  03.2
0408:  GOTO   40D
0409:  MOVF   2A,W
040A:  SUBWF  28,W
040B:  BTFSC  03.0
040C:  GOTO   41D
040D:  BTFSC  34.2
040E:  GOTO   41D
....................               { 
....................                   IF(LDR1_FLAG==1) 
040F:  BTFSS  34.1
0410:  GOTO   41B
....................                    { 
....................                      FORWARD=1; 
0411:  BSF    06.0
....................                      REVERSE=0; 
0412:  BCF    06.1
....................                      DELAY_MS(500); 
0413:  MOVLW  02
0414:  MOVWF  3A
0415:  MOVLW  FA
0416:  MOVWF  43
0417:  CALL   0BC
0418:  DECFSZ 3A,F
0419:  GOTO   415
....................                      FORWARD=0; 
041A:  BCF    06.0
....................                    } 
....................                      LDR1_FLAG=0; 
041B:  BCF    34.1
....................                      LDR2_FLAG=1; 
041C:  BSF    34.2
....................               } 
....................  
....................              if(((value3)+100) > (value4)) 
041D:  MOVLW  64
041E:  ADDWF  2C,W
041F:  MOVWF  3A
0420:  MOVF   2D,W
0421:  MOVWF  3B
0422:  BTFSC  03.0
0423:  INCF   3B,F
0424:  MOVF   2F,W
0425:  SUBWF  3B,W
0426:  BTFSS  03.0
0427:  GOTO   430
0428:  BTFSS  03.2
0429:  GOTO   42E
042A:  MOVF   3A,W
042B:  SUBWF  2E,W
042C:  BTFSC  03.0
042D:  GOTO   430
....................               { 
....................                      BATTERY_1=1; 
042E:  BSF    06.2
....................                      BATTERY_2=0; 
042F:  BCF    06.3
....................               } 
....................  
....................              if(((value4)+100) > (value3)) 
0430:  MOVLW  64
0431:  ADDWF  2E,W
0432:  MOVWF  3A
0433:  MOVF   2F,W
0434:  MOVWF  3B
0435:  BTFSC  03.0
0436:  INCF   3B,F
0437:  MOVF   2D,W
0438:  SUBWF  3B,W
0439:  BTFSS  03.0
043A:  GOTO   443
043B:  BTFSS  03.2
043C:  GOTO   441
043D:  MOVF   3A,W
043E:  SUBWF  2C,W
043F:  BTFSC  03.0
0440:  GOTO   443
....................               { 
....................                      BATTERY_1=0; 
0441:  BCF    06.2
....................                      BATTERY_2=1; 
0442:  BSF    06.3
....................               } 
....................  
....................  
.................... } 
0443:  GOTO   289
.................... } 
....................  
.................... void display(unsigned int16 n) 
.................... { 
0444:  SLEEP
....................    int i = 0; 
*
01C3:  CLRF   3C
....................    int a[4]; 
....................  
....................    for(i=0;i<=3;i++) 
01C4:  CLRF   3C
01C5:  MOVF   3C,W
01C6:  SUBLW  03
01C7:  BTFSS  03.0
01C8:  GOTO   1F1
....................    { 
....................       a[i]=n%10; 
01C9:  MOVLW  3D
01CA:  ADDWF  3C,W
01CB:  MOVWF  04
01CC:  MOVF   3B,W
01CD:  MOVWF  43
01CE:  MOVF   3A,W
01CF:  MOVWF  42
01D0:  CLRF   45
01D1:  MOVLW  0A
01D2:  MOVWF  44
01D3:  CALL   19D
01D4:  MOVF   77,W
01D5:  MOVWF  00
....................       B[I] = n%10; 
01D6:  MOVLW  36
01D7:  ADDWF  3C,W
01D8:  MOVWF  04
01D9:  MOVF   3B,W
01DA:  MOVWF  43
01DB:  MOVF   3A,W
01DC:  MOVWF  42
01DD:  CLRF   45
01DE:  MOVLW  0A
01DF:  MOVWF  44
01E0:  CALL   19D
01E1:  MOVF   77,W
01E2:  MOVWF  00
....................       n=n/10; 
01E3:  MOVF   3B,W
01E4:  MOVWF  43
01E5:  MOVF   3A,W
01E6:  MOVWF  42
01E7:  CLRF   45
01E8:  MOVLW  0A
01E9:  MOVWF  44
01EA:  CALL   19D
01EB:  MOVF   79,W
01EC:  MOVWF  3B
01ED:  MOVF   78,W
01EE:  MOVWF  3A
....................    } 
01EF:  INCF   3C,F
01F0:  GOTO   1C5
....................  
....................    data(a[3]|0x30); 
01F1:  MOVF   40,W
01F2:  IORLW  30
01F3:  MOVWF  41
01F4:  MOVWF  42
01F5:  CALL   0D9
....................    data(a[2]|0x30); 
01F6:  MOVF   3F,W
01F7:  IORLW  30
01F8:  MOVWF  41
01F9:  MOVWF  42
01FA:  CALL   0D9
....................    data(a[1]|0x30); 
01FB:  MOVF   3E,W
01FC:  IORLW  30
01FD:  MOVWF  41
01FE:  MOVWF  42
01FF:  CALL   0D9
....................    data(a[0]|0x30); 
0200:  MOVF   3D,W
0201:  IORLW  30
0202:  MOVWF  41
0203:  MOVWF  42
0204:  CALL   0D9
....................  
....................    if(z==1) 
0205:  DECFSZ 35,W
0206:  GOTO   213
....................    { 
....................    command(0x8b); 
0207:  MOVLW  8B
0208:  MOVWF  41
0209:  CALL   0CF
....................    data('.'); 
020A:  MOVLW  2E
020B:  MOVWF  42
020C:  CALL   0D9
....................    command(0xcb); 
020D:  MOVLW  CB
020E:  MOVWF  41
020F:  CALL   0CF
....................    data('.'); 
0210:  MOVLW  2E
0211:  MOVWF  42
0212:  CALL   0D9
....................    } 
....................    delay_ms(100); 
0213:  MOVLW  64
0214:  MOVWF  43
0215:  CALL   0BC
.................... } 
0216:  RETLW  00
....................  

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
